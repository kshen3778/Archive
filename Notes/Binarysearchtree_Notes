Binary Search Tree(BST)

Arrays are bad at inserting and deletion
LinkedLists are bad at traversing and search
The BST is another data structure you can use for search.

Most of the time, a Tree uses recursion definition:
For example - Binary Tree:
Given a tree, if the root has one,two, or no kids. It's left and right subtree are binary tree then its a binary tree.
 
 In a BST:
 x - root node
 y - left node
 z - right node
 BST maintain that y < x < z
 Note: BST is a type of binary tree where the y < x < z relation is maintained.
 Example:
 		10
 	5		18
  4	  6	  15  19
  
  Each subtree is a BST, so a BST contains more BST (recursion).
  Key concepts to decide what data structure to us: insertion,deletion,search and traversing
  
	1. Instead of arranging data in a linear array, store it in a binary search tree.

  Given a BST and you need to find a number n its easy.
  Compare n with the root. Is it bigger? Smaller?
  If bigger compare it to the right subtree. If smaller, compare to left subtree(RECURSION).
  
  The running time is O(height of the tree) which is close to O(logn).
  
  Search code structure:	
  
  search(Node root, int n){
  	if(root == null) return false; //n doesnt exist in BST(you've gone out of bounds)
  	if(root.value == n) return true; //n is in the BST
  	
  	if(root.value < n){
  		return search(root.leftkid,n);
  	}else{
  		return search(root.rightkid,n);
  	}
  }
  
  Insert a node:
  	If you want to insert a node.
  	Check if there is an empty node insert it in(while maintaining y < x < Z)
  	
  Delete a node:
  3 cases:
  A leaf: just delete it. a leaf is at the bottom of the tree. just set the root of the leaf to null.
  One kid node: Delete the node and promote the subnode and connect it with the node above.
  Two kid node: Find minimum left node(a leaf) in the right tree and set it to the two kid node's position.
  
  BST has a disadvantage:
  When the data is in ascending order alread, you aren't building a BST, you are building a LinkedList by default.
  
  There is a type of BST called AVL tree which maintains a balance between the two sides(left and right)
  
  Preorder traversal
  Root-leftkid-rightkid
  
  Definition of Complete Binary tree: The tree is filled level by level with the leaves on the bottom level(bottom level can be partially filled in order from left to right)
  
  
  You can store  BST in an array(instead of an abstract data type)
  Store it in layers from left to right
  So the above tree should be [10,5,18,4,6,15,19]
  to access left kid's index: parent[index] x 2
  to access right kid's index: parent[index] x 2 + 1
  
  To find the parent of a node:
  From kid node n: floor(n/2) <-- round down 
  
  Tree Traversing in detail:
  3 types:
  1. In order
  2. Pre order
  3. Post order
  4. By level
  1,2, and 3 can be based on recursion
  In order traversing is: Left kid -> Root -> Right kid
  Pre Order: Root > left > right
  Post order: Left > right > root
  By Level is just looping through because it is already in array
  